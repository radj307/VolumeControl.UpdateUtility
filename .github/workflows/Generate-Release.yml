name: Generate Release

on:
  push:
    tags: [ '*.*.*' ]
  workflow_dispatch:

env:
  # [PROJECT_NAME]
  # Currently this is used for the following scenarios:
  # - Build Subdirectory Name
  # - Archive Name Prefix
  PROJECT_NAME: 'VCUpdateUtility'
  BUILD_TYPE: MinSizeRel

jobs:
  create-binary:
    runs-on: windows-latest

    steps:
      # Check out the repository
    - uses: actions/checkout@v3
      with:
        submodules:   recursive
        fetch-depth:  0
      
    # Set up platform dependencies
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1
      
    # Configure CMake Cache
      # Windows
    - name:   Configure CMake
      run:    cmake -B '${{github.workspace}}/build' -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja

    # Build Binary
    - name: Build
      run:  cmake --build '${{github.workspace}}/build' --config '${{env.BUILD_TYPE}}'
      
    # Upload Artifact
    - name:   Upload Artifact
      uses:   actions/upload-artifact@v2
      with:
        name: latest
        path: '${{github.workspace}}/build/${{env.PROJECT_NAME}}/*.exe'
#:create-binaries
      
  create-release:
    needs: create-binary      
    runs-on: ubuntu-latest
    
    steps:
    # Download Artifacts
    - name: 'Download Build Artifacts'
      uses: actions/download-artifact@v3
            
    # Retrieve the latest git tag if this was triggered by a tag
    - name: 'Get Release Tag'
      id:   get_version
      run:  |
            if [ "${{github.event.inputs.tag}}" == "" ]; then TAG="${GITHUB_REF/refs\/tags\//}"; else TAG="${{github.event.inputs.tag}}" ; fi
            echo ::set-output name=VERSION::$TAG
            echo ::set-output name=NAME::"Release $TAG"
      
    # Stage downloaded build artifacts for deployment
    - name:   'Stage Archives'
      run:    |
              cd ${{github.workspace}}
              if mv ./latest/* ./ ; then ls -lAgh ; else ls -lAghR ; fi
      shell:  bash
      
    # Upload Release
    - name: 'Create Release'
      uses: softprops/action-gh-release@v1
      with:
        draft:                    false
        prerelease:               ${{ github.event.inputs.is-prerelease || false }}
        tag_name:                 ${{ steps.get_version.outputs.VERSION }}
        name:                     ${{ steps.get_version.outputs.NAME }}
        generate_release_notes:   ${{ github.event.inputs.autogenerate || true }}
        body:                     ${{ github.event.inputs.body || '' }}
        fail_on_unmatched_files:  true
        files:                    ${{github.workspace}}/*.exe
#:create-release
